<?xml version="1.0"?>
<!DOCTYPE some_name [ 
<!ENTITY nbsp "&#160;">
<!ENTITY copy "&#169;">
<!ENTITY epsilon "&#949;">
]>

<page>
  <title>Examples using the MOEA Framework</title>
  <description>Walk through introductory examples using the MOEA Framework</description>
  <content>
<h2>Examples</h2>

<p>
  The following examples demonstrate the basic functionality provided by the
  MOEA Framework.  Links to the full source code are provided alongside each
  code snippet.
</p>

<div class="section">
<h3>Setup</h3>

<p>
  In order to run these examples or use the MOEA Framework, Java 6 (or a later
  version) must be installed on your computer.  The Java 6 development kit for
  Windows and Linux can be downloaded 
  <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u29-download-513648.html">here</a>.
</p>

<p>
  To run these examples, first download and extract the latest compiled 
  binaries from the <a href="downloads.html">downloads</a> page.  Windows users
  may extract the downloaded file using
  <a href="http://www.7-zip.org/">7-zip</a>.  The files will extract to a 
  folder called MOEAFramework-%VERSION%.  
</p>

<p>
  Next, download one of the examples below to this folder.  For example, if
  you downloaded <a href="Example1.java">Example1.java</a>, the folder contents
  should look similar to:
</p>

  <div class="files">
  <ul>
    <li class="folder">MOEAFramework-%VERSION%/</li>
    <li class="empty">
      <ul>
        <li class="folder">javadoc/</li>
        <li class="folder">lib/</li>
        <li class="folder">licenses/</li>
        <li class="folder">pf/</li>
        <li><b>Example1.java</b></li>
        <li>global.properties</li>
        <li>HELP</li>
        <li>launch-diagnostic-tool.bat</li>
        <li>LICENSE</li>
        <li>NEWS</li>
        <li>README</li>
      </ul>
    </li>
  </ul>
  </div>
  
<p>
  Lastly, compile and run the program using the following commands.  For
  Windows users, run these commands in the Command Prompt from the 
  MOEAFramework-%VERSION% folder.
</p>

<pre>
              javac -Djava.ext.dirs=lib Example1.java
              java -Djava.ext.dirs=lib Example1</pre>

<p>
  If you receive the message <i>'javac' is not recognized as an internal or
  external command, operable program or batch file</i>, try the following steps
  to setup your environment on 
  <a href="http://vietpad.sourceforge.net/javaonwindows.html">Windows</a> or
  <a href="http://vietpad.sourceforge.net/javaonlinux.html">Linux</a>.
</p>
</div>

<div class="section">
<h3>Example 1: Simple Run</h3>

<div class="files">
  <ul>
    <li><a href="Example1.java">Example1.java</a></li>
  </ul>
</div>

<p>
  The Executor provides all the necessary features to execute an algorithm on
  a specific problem.  For example, the following runs NSGA-II on the UF1 test
  problem.  The executor provides many useful functions, such as enabling
  distributed evaluations across multiple cores or computers, checkpoints,
  instrumentation, etc.
</p>

<div class="code">
  <pre class="brush: java; toolbar: false;">
NondominatedPopulation result = new Executor()
    .withProblem("UF1")
    .withAlgorithm("NSGAII")
    .withMaxEvaluations(10000)
    .distributeOnAllCores()
    .run();
  </pre>
</div>
</div>

<div class="section">
<h3>Example 2: Statistical Comparison of Algorithms</h3>

<div class="files">
  <ul>
    <li><a href="Example2.java">Example2.java</a></li>
  </ul>
</div>

<p>
  Statistical analyses are provided by the Analyzer.  The Analyzer can display
  the min, median, max and aggregate values for multiple performance indicators,
  including hypervolume, generational distance, inverted generational distance,
  additive &epsilon;-indicator, spacing and contribution.  Additionally,
  Kruskal-Wallis and Mann-Whitney U tests provide statistical significance
  results.
</p>

<div class="code">
  <pre class="brush: java; toolbar: false;">
<![CDATA[
String problem = "UF1";
String[] algorithms = { "NSGAII", "GDE3", "eMOEA" };
		
//setup the experiment
Executor executor = new Executor()
    .withProblem(problem)
    .withMaxEvaluations(10000);
		
Analyzer analyzer = new Analyzer()
    .withProblem(problem)
    .includeAllMetrics()
    .showStatisticalSignificance();

//run each algorithm for 50 seeds
for (String algorithm : algorithms) {
    analyzer.addAll(algorithm, 
        executor.withAlgorithm(algorithm).runSeeds(50));
}

//print the results
analyzer.printAnalysis();
]]>
  </pre>
</div>
</div>

<div class="section">
<h3>Example 3: Collecting Runtime Dynamics</h3>

<div class="files">
  <ul>
    <li><a href="Example2.java">Example3.java</a></li>
  </ul>
</div>

<p>
  Runtime dynamics provide insight into the behavior of an optimization
  algorithm throughout a run.  For instance, one can observe how solution
  quality changes with the number of function evaluations (NFE).  The 
  Instrumenter class collects this data and provides it to the user.
</p>

<div class="code">
  <pre class="brush: java; toolbar: false;">
<![CDATA[
Instrumenter instrumenter = new Instrumenter()
    .withReferenceSet(new File("./pf/UF1.dat"))
    .withFrequency(100)
    .attachElapsedTimeCollector()
    .attachGenerationalDistanceCollector();
		
new Executor()
    .withProblem("UF1")
    .withAlgorithm("NSGAII")
    .withMaxEvaluations(10000)
    .withInstrumenter(instrumenter)
    .run();
		
Accumulator accumulator = instrumenter.getLastAccumulator();
		
for (int i=0; i<accumulator.size("NFE"); i++) {
  System.out.println(accumulator.get("NFE", i) + "\t" + 
      accumulator.get("Elapsed Time", i) + "\t" +
      accumulator.get("GenerationalDistance", i));
}
]]>
  </pre>
</div>
</div>

<div class="section">
<h3>Example 4: Defining New Problems</h3>

<div class="files">
  <ul>
    <li><a href="Example4.java">Example4.java</a></li>
  </ul>
</div>

<p>
  A number of methods are available to provide custom, user-defined problems
  that cleanly integrate with all other components of the MOEA Framework.  The
  following demonstrates the two-objective DTLZ2 problem.  The MOEA Framework
  also provides the means to define problems in other programming languages,
  such as C/C++.
</p>

<div class="code">
  <pre class="brush: java; toolbar: false;">
<![CDATA[
	public class DTLZ2 extends AbstractProblem {

		public MyDTLZ2() {
			super(11, 2);
		}

		public Solution newSolution() {
			Solution solution = new Solution(getNumberOfVariables(), 
					getNumberOfObjectives());

			for (int i = 0; i < getNumberOfVariables(); i++) {
				solution.setVariable(i, new RealVariable(0.0, 1.0));
			}

			return solution;
		}

		public void evaluate(Solution solution) {
			double[] x = CoreUtils.castVariablesToDoubleArray(solution);
			double[] f = new double[numberOfObjectives];

			int k = numberOfVariables - numberOfObjectives + 1;

			double g = 0.0;
			for (int i = numberOfVariables - k; i < numberOfVariables; i++) {
				g += Math.pow(x[i] - 0.5, 2.0);
			}

			for (int i = 0; i < numberOfObjectives; i++) {
				f[i] = 1.0 + g;

				for (int j = 0; j < numberOfObjectives - i - 1; j++) {
					f[i] *= Math.cos(0.5 * Math.PI * x[j]);
				}

				if (i != 0) {
					f[i] *= Math.sin(0.5 * Math.PI * x[numberOfObjectives - i - 1]);
				}
			}

			solution.setObjectives(f);
		}
		
	}
]]>
  </pre>
</div>

<p>
  This can subsequently be used with the Executor.
</p>

<div class="code">
  <pre class="brush: java; toolbar: false;">
<![CDATA[
NondominatedPopulation result = new Executor()
    .withProblemClass(DTLZ2.class)
    .withAlgorithm("GDE3")
    .withMaxEvaluations(10000)
    .distributeOnAllCores()
    .run();
]]>
  </pre>
</div>
</div>

<div class="section">
<h3>Example 5: Diagnostic Tool</h3>

<p>
  A graphical tool is distributed with the MOEA Framework for comparing multiple
  algorithms on a number of test problems.  Windows users may launch this tool
  by running the <code>launch-diagnostic-tool.bat</code> file.  The screenshots
  below demonstrate the functionality provided by this tool.
</p>

<p>
  <a href="images/screenshot-1.png" rel="lightbox[main]"
      title="Comparison of three MOEAs on the UF1 problem">
    <img src="images/screenshot-1-small.png" class="float-left" width="114" height="70" alt="Comparison of three MOEAs on the UF1 problem" />
   </a>
  
  <a href="images/screenshot-3.png" rel="lightbox[main]"
      title="Multiple plots can be shown side-by-side">
    <img src="images/screenshot-3-small.png" class="float-left" width="114" height="70" alt="Multiple plots can be shown side-by-side" />
  </a>
  
  <a href="images/screenshot-2.png" rel="lightbox[main]"
      title="The convergence of the approximation set to the reference set">
    <img src="images/screenshot-2-small.png" class="float-left" width="93" height="70" alt="The convergence of the approximation set to the reference set" />
  </a>
</p>
</div>

<div class="section">
<h3>Concluding Remarks</h3>

<p>
  We hope that you find the MOEA Framework useful.  We strive to make this
  framework reliable and easy-to-use, and feedback from users like yourself
  help us meet these goals.  If you encounter any issues using this software,
  please <a href="support.html">notify us</a>.
</p>
</div>
  </content>
</page>
